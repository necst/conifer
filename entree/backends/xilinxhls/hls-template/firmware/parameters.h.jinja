#ifndef BDT_PARAMS_H__
#define BDT_PARAMS_H__ 

#include "BDT.h"
#include "ap_fixed.h"
{% if cfg_get_PDR %}
#include "utils.h"
#include "ap_axi_sdata.h"

static const int n_trees = {{n_trees}};
static const int max_depth = {{max_depth}};
static const int n_features = {{n_features}};
static const int n_classes = {{n_classes}};
typedef {{Precision}} input_t;
typedef input_t input_arr_t[n_features];
typedef {{Precision}} score_t;
typedef score_t score_arr_t[n_classes];
    {#- TODO score_arr_t #}
typedef input_t threshold_t;
    {% if cfg_get_PDR %}
        {#- TODO: Allow max_parallel_sample configuration #}
static const int max_parallel_samples = {{max_parallel_samples}};
static const int bank_count = {{bank_count}};
static const int sample_id_size = bitsizeof(max_parallel_samples);
static const int bank_address_size = bitsizeof(bank_count + 1);
typedef hls::axis<ap_uint<8>, 0, 0, bank_address_size> bank_command_s_t;
typedef hls::axis<input_arr_t, 0, 0, 0> idless_input_arr_s_t;
typedef hls::axis<input_arr_t, 0, sample_id_size, 0> input_arr_s_t;
typedef hls::axis<score_t, 0, sample_id_size, bitsizeof(n_classes)> tree_score_s_t;
typedef hls::axis<score_t, 0, sample_id_size, 0> class_score_s_t;
    {%- endif %}

static const BDT::BDT<n_trees, max_depth, n_classes, input_arr_t, score_t, threshold_t> bdt = 
{ // The struct
    {{norm}}, // The normalisation
    {
        {{- init_predict | map('float') | join(",") -}}
    }, // The init_predict
    { // The array of trees

    {%- for tree_ip in tree_ips %}
    {%- if tree_ip.ifield == 0 %}
        {%- if tree_ip.iclass == 0 %}
        { // trees[{{tree_ip.itree}}]
        {%- endif %}
            { // [{{tree_ip.iclass}}]
    {%- endif %}
                {
                {{- tree_ip.map_tree |join(",") -}}
                }
                {%- if tree_ip.ifield < len_tree_fields - 1 -%},{%- endif %}
        {%- if tree_ip.ifield == len_tree_fields - 1 %}
            }{%- if tree_ip.iclass < len_trees - 1 %},{%- endif %}
            {%- if tree_ip.iclass == len_trees - 1 %}
        }{%- if tree_ip.itree < n_trees - 1 %},{%- endif %}
            {%- endif %}
        {%- endif %}
    {%- endfor%}
    }
};
#endif
{%- endif %}
