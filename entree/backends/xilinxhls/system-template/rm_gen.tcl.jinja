# Copyright 2022 Novel, Emerging Computing System Technologies Laboratory 
#                (NECSTLab), Politecnico di Milano

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


################################################################
# This is a generated script based on design: design_1
#
# Though there are limitations about the generated script,
# the main purpose of this utility is to make learning
# IP Integrator Tcl commands easier.
################################################################

namespace eval _tcl {
proc get_script_folder {} {
   set script_path [file normalize [info script]]
   set script_folder [file dirname $script_path]
   return $script_folder
}
}
variable script_folder
set script_folder [_tcl::get_script_folder]

################################################################
# Check if script is running in correct Vivado version.
################################################################
set scripts_vivado_version 2021.2
set current_vivado_version [version -short]

if { [string first $scripts_vivado_version $current_vivado_version] == -1 } {
   puts ""
   catch {common::send_gid_msg -ssname BD::TCL -id 2041 -severity "ERROR" "This script was generated using Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Please run the script in Vivado <$scripts_vivado_version> then open the design in Vivado <$current_vivado_version>. Upgrade the design by running \"Tools => Report => Report IP Status...\", then run write_bd_tcl to create an updated script."}

   return 1
}

################################################################
# COMMAND-LINE ARGUMENTS
################################################################
set prj_root  [lindex $argv 0]
set prj_dir [lindex $argv 1]
set ip_dir [lindex $argv 2]
set prj_name {{projectname}}_system
set prj_part {{XilinxPart}}
set prj_board {{XilinxBoard}}
set sample_length {{SampleLength}}
set n_classes {{nClasses}}
set trees_in_class {
{%- for i in TreesInClass -%}
   {{' {}'.format(i)}}
{%- endfor -%}
}
set result_lenght {{ResultLength}}
set output_length {{OutputLength}}
set n_banks {{nBanks}}
set n_trees_per_bank {{TreesPerBank}}
set id_length {{IDLength}}
set n_jobs {{nJobs}}


################################################################
# START
################################################################

# To test this script, run the following commands from Vivado Tcl console:
# source design_1_script.tcl

# If there is no project opened, this script will create a
# project, but make sure you do not have an existing project
# <./myproj/project_1.xpr> in the current working folder.

#set list_projs [get_projects -quiet]
create_project -force ${prj_name} ${prj_dir} -part ${prj_part}
set_property BOARD_PART ${prj_board} [current_project]



# CHANGE DESIGN NAME HERE
variable design_name
set design_name top_system

common::send_gid_msg -ssname BD::TCL -id 2003 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

create_bd_design $design_name

common::send_gid_msg -ssname BD::TCL -id 2004 -severity "INFO" "Making design <$design_name> as current_bd_design."
current_bd_design $design_name

set_property ip_repo_paths $ip_dir [current_project]
update_ip_catalog

set bCheckIPsPassed 1

set parentCell ""

variable script_folder
variable design_name

if { $parentCell eq "" } {
   set parentCell [get_bd_cells /]
}

# Get object for parentCell
set parentObj [get_bd_cells $parentCell]
if { $parentObj == "" } {
   catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
   return
}

# Make sure parentObj is hier blk
set parentObj [get_bd_cells $parentCell]
if { $parentObj == "" } {
   catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
   return
}

# Save current instance; Restore later
set oldCurInst [current_bd_instance .]

# Create reconfigurable modules as block design containing single tree IPs
# idle tree:
create_bd_design tree_rm_idle
create_bd_cell -type ip -vlnv xilinx.com:iris_PDR_Vivado_GB:tree_idle:1.0 tree_idle_0
startgroup
make_bd_intf_pins_external  [get_bd_intf_pins tree_idle_0/input_stream]
make_bd_pins_external  [get_bd_pins tree_idle_0/ap_clk]
make_bd_pins_external  [get_bd_pins tree_idle_0/ap_rst_n]
make_bd_intf_pins_external  [get_bd_intf_pins tree_idle_0/output_stream]
endgroup
set_property name input_stream [get_bd_intf_ports input_stream_0]
set_property name ap_clk [get_bd_ports ap_clk_0]
set_property name ap_rst_n [get_bd_ports ap_rst_n_0]
set_property name output_stream [get_bd_intf_ports output_stream_0]
validate_bd_design
save_bd_design
# trees:
for {set i 0} {$i < $n_classes} {incr i} {
   for {set j 0} {$j < [lindex $trees_in_class $i]} {incr j} {
      create_bd_design tree_rm_${i}_${j}
      create_bd_cell -type ip -vlnv xilinx.com:iris_PDR_Vivado_GB:tree_cl${i}_${j}:1.0 tree_cl${i}_${j}_0
      startgroup
      make_bd_intf_pins_external  [get_bd_intf_pins tree_cl${i}_${j}_0/input_stream]
      make_bd_pins_external  [get_bd_pins tree_cl${i}_${j}_0/ap_clk]
      make_bd_pins_external  [get_bd_pins tree_cl${i}_${j}_0/ap_rst_n]
      make_bd_intf_pins_external  [get_bd_intf_pins tree_cl${i}_${j}_0/output_stream]
      endgroup
      set_property name input_stream [get_bd_intf_ports input_stream_0]
      set_property name ap_clk [get_bd_ports ap_clk_0]
      set_property name ap_rst_n [get_bd_ports ap_rst_n_0]
      set_property name output_stream [get_bd_intf_ports output_stream_0]
      validate_bd_design
      save_bd_design
   }
}

current_bd_design $design_name
# Set parent object as current
current_bd_instance $parentObj

export_ip_user_files -of_objects [get_files ${prj_dir}/${prj_root}.srcs/sources_1/bd/tree_rm_idle/tree_rm_idle.bd] -no_script -sync -force -quiet
create_ip_run [get_files -of_objects [get_fileset sources_1] ${prj_dir}/${prj_root}.srcs/sources_1/bd/tree_rm_idle/tree_rm_idle.bd]
wait_on_run

for {set i 0} {$i < $n_classes} {incr i} {
	for {set j 0} {$j < [lindex $trees_in_class $i]} {incr j} {
		export_ip_user_files -of_objects [get_files ${prj_dir}/${prj_root}.srcs/sources_1/bd/tree_rm_${i}_${j}/tree_rm_${i}_${j}.bd] -no_script -sync -force -quiet
		create_ip_run [get_files -of_objects [get_fileset sources_1] ${prj_dir}/${prj_root}.srcs/sources_1/bd/tree_rm_${i}_${j}/tree_rm_${i}_${j}.bd]
	}
}
update_compile_order -fileset sources_1
launch_runs tree_rm_*_synth_1 -jobs ${n_jobs}
wait_on_run tree_rm_*_synth_1